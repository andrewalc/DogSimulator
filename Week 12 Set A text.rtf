{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
; Andrew Alcala alcala.a@husky.neu.edu\
; Jeffrey Champion champion.j@husky.neu.edu\
;-------------------------------------------------------------------------------\
; PROBLEM SET 12 A\
;-------------------------------------------------------------------------------\
; DATA DEFINITIONS:\
;-------------------------------------------------------------------------------\
; [List of X] is one of:\
; '()\
; (cons X [List-of X])\
\
; a NumberPair is a (list Number Number)\
;-------------------------------------------------------------------------------\
; Exercise 285\
\
; convert-euro: [List-of Number] -> [List-of Number]\
; convert-euro: Converts a list of dollars to a list of euros\
(check-expect (convert-euro '()) '())\
(check-expect (convert-euro '(0.00)) '(0.00))\
(check-expect (convert-euro '(1.00)) '(1.22))\
(check-expect (convert-euro '(1.00 2.00)) '(1.22 2.44))\
(check-expect (convert-euro '(0.00 1.00 2.00 10.00)) '(0.00 1.22 2.44 12.20))\
(define (convert-euro lon)\
  (map (\uc0\u955  ($) (/ $ (/ 1 1.22))) lon))\
\
; convertFC: [List-of Number] -> [List-of Number]\
; convertFC: Converts a list of degrees Farenheit to a list of degress Celsius\
(check-expect (convert-euro '()) '())\
(check-expect (convertFC '(32)) '(0))\
(check-expect (convertFC '(5)) '(-15))\
(check-expect (convertFC '(0 32 5 72 100)) '(-17.7 0 -15 22.2 37.7))\
(define (convertFC lon)\
  (map (\uc0\u955  (F) (* (- F 32) (/ 5 9))) lon))\
\
; translate: \{List-of Posn] -> [List-of NumberPair]\
; translate: Converts a List of Posns into a List of number pairs.\
(check-expect (translate '()) '())\
(check-expect (translate (list (make-posn 3 4))) '((3 4)))\
(check-expect (translate (list (make-posn 1 2) (make-posn 3 4))) '((1 2) (3 4)))\
(define (translate lop)\
  (map (\uc0\u955  (p) `(,(posn-x p) ,(posn-y p))) lop))\
;-------------------------------------------------------------------------------\
; Exercise 288\
(check-expect (ex1 5) '(0 1 2 3 4))\
(define (ex1 n)\
  (build-list n (\uc0\u955  (x) x)))\
\
(check-expect (ex2 5) '(1 2 3 4 5))\
(define (ex2 n)\
  (build-list n (\uc0\u955  (x) (+ x 1))))\
\
(check-expect (ex3 4) '( 1 1/2 1/3 1/4))\
(define (ex3 n)\
  (build-list n (\uc0\u955  (x) (/ 1 (+ x 1)))))\
\
(check-expect (ex4 5) '(0 2 4 6 8))\
(define (ex4 n)\
  (remove-all #f (build-list (* n 2) (\uc0\u955  (x) (if (= (modulo x 2) 0) x #f)))))\
\
(check-expect (ex5 0) '())\
(check-expect (ex5 1) '((1)))\
(check-expect (ex5 3) '((1 0 0) (0 1 0) (0 0 1)))\
(define (ex5 n)\
  (build-list n (\uc0\u955  (x) (build-list n (\u955  (y) (if (= x y) 1 0))))))\
\
; Number [Number -> Number] -> [List-of Number]\
; tabulates an operation between n and 0 (incl.) in a list\
(define (tabulate n op)\
  (reverse (build-list (+ n 1) (\uc0\u955  (x) (if (= x 0) (op 0) (op x))))))}