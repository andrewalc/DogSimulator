;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname |Week 8 Set A|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
;;------------------------------------------------------------------------------
; CONSTANTS:
;;------------------------------------------------------------------------------
(define WIDTH 700)
(define HEIGHT 400)
(define dot-y 200)
(define CANVAS (empty-scene WIDTH HEIGHT))
(define dot (circle 10 "solid" "red"))
;;------------------------------------------------------------------------------
; DATA DEFINITIONS
;;------------------------------------------------------------------------------
(define-struct Traveler [x delta x-limit])
; a Traveler is a (make-Traveler Number Number Number)
; INTERPRETATION:
; - x represents the initial x coordinate of the dotâ€™s position.
; - delta represents the positive number of pixels the dot moves per tick.
; - x-limit is a number larger than x0 that indicates how far the dot must move.
;;------------------------------------------------------------------------------
; FUNCTIONS
;;------------------------------------------------------------------------------

; travel: Number Number Number -> Traveler
; travel: Shows the horizontal, rightward movement of a red dot
;         based on start and end specification

(define (travel x0 delta x-limit)
  (big-bang (valid-traveler x0 delta x-limit)
            [to-draw render]
            [on-tick move]
            [stop-when end]))

; valid-traveler: Number Number Number -> Traveler
; calid-traveler: Creates a valid traveler
(define (valid-traveler x0 delta x-limit)
  (if
   (> x-limit x0)
   (make-Traveler x0 delta x-limit)
   ((error "x0 must be greater than x-limit")))

; render: Traveler -> Image
; render: Renders an image of a traveling dot.
(define (render t)
  (place-image dot (Traveler-x t) dot-y CANVAS))

; move: Traveler -> Traveler
; move: Adds delta to a Traveler's x value
(define (move t)
   (local ((define x (Traveler-x t))
          (define delta (Traveler-delta t))
          (define x-limit (Traveler-x-limit t)))
  (make-Traveler (+ x delta) delta x-limit)))

; end: Traveler -> Boolean
; end: Is the dot at the x-limit?
(define (end t)
   (local ((define x (Traveler-x t))
          (define x-limit (Traveler-x-limit t)))
  (= x x-limit)))